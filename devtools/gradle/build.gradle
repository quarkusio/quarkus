plugins {
    id 'com.gradle.plugin-publish' version '0.12.0'
    id 'java-gradle-plugin'
}
if (JavaVersion.current().isJava9Compatible()) {
    compileJava.options.compilerArgs.addAll(['--release', '8'])
}
compileJava {
    options.encoding = 'UTF-8'
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

repositories {
    // in case a custom local repo is configured we are going to use that instead of the default mavenLocal()
    if (System.properties.containsKey('maven.repo.local')) {
        maven {
            url System.properties.get('maven.repo.local')
        }
    } else {
        mavenLocal()
    }
    mavenCentral()
}

configurations.all {
    exclude group: 'io.quarkus', module: 'quarkus-bootstrap-maven-resolver'
}

dependencies {
    api gradleApi()

    implementation "io.quarkus:quarkus-bootstrap-core:${version}"
    implementation "io.quarkus:quarkus-devtools-common:${version}"
    implementation "io.quarkus:quarkus-platform-descriptor-json:${version}"
    implementation "io.quarkus:quarkus-platform-descriptor-resolver-json:${version}"
    implementation "io.quarkus:quarkus-core-deployment:${version}"

    testImplementation 'org.mockito:mockito-core:3.5.5'
    testImplementation 'org.assertj:assertj-core:3.16.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
    testImplementation 'org.awaitility:awaitility:4.0.3'
    testImplementation "io.quarkus:quarkus-devmode-test-utils:${version}"
    testImplementation gradleTestKit()
}

test {
    // propagate the custom local maven repo, in case it's configured
    if (System.properties.containsKey('maven.repo.local')) {
        systemProperty 'maven.repo.local', System.properties.get('maven.repo.local')
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
    useJUnitPlatform()
}

javadoc {
    options.addStringOption('encoding', 'UTF-8')
}

pluginBundle {
    website = 'https://quarkus.io/' 
    vcsUrl = 'https://github.com/quarkusio/quarkus' 
    tags = ['quarkus', 'quarkusio', 'graalvm'] 
}

gradlePlugin {
    plugins {
        quarkusPlugin {
            id = 'io.quarkus'
            implementationClass = 'io.quarkus.gradle.QuarkusPlugin'
            displayName = 'Quarkus Plugin'
            description = 'Builds a Quarkus application, and provides helpers to launch dev-mode, the Quarkus CLI, building of native images'
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
