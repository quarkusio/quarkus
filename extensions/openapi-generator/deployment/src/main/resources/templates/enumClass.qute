{#if e.withXml}
    @XmlType(name="{e.datatypeWithEnum}")
    @XmlEnum({e.dataType}.class)
{/if}
    {#include additionalEnumTypeAnnotations.qute e=e /}public enum {e.datatypeWithEnum} {
        {#if e.allowableValues}
        {#if e.withXml}
        {#for v in e.allowableValues.enumVars}@XmlEnumValue({#if v.isInteger || v.isDouble || v.isLong || v.isFloat}"{/if}{v.value}{#if v.isInteger || v.isDouble || v.isLong || v.isFloat}"{/if}) {v.name}({e.dataType}.valueOf({v.value})){#if hasNext}, {#else}; {/if}{/for}
        {#else}
        {#for v in e.allowableValues.enumVars}{v.name}({e.dataType}.valueOf({v.value})){#if hasNext}, {#else};{/if}{/for}
        {/if}
        {/if}

        {e.dataType} value;

        {e.datatypeWithEnum} ({e.dataType} v) {
            value = v;
        }

        public {e.dataType} value() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        {#if e.withXml}
        public static {e.datatypeWithEnum} fromValue(String, v) {
            for ({#if e.datatypeWithEnum}{e.datatypeWithEnum}{#else}{e.classname}{/if} b : {#if e.datatypeWithEnum}{e.datatypeWithEnum}{#else}{e.classname}{/if}.values()) {
                if (String.valueOf(b.value).equals(v)) {
                    return b;
                }
            }
            {#if e.useNullForUnknownEnumValue}return null;{#else}throw new IllegalArgumentException("Unexpected value '" + v + "'");{/if}
        }
        {/if}
    }
