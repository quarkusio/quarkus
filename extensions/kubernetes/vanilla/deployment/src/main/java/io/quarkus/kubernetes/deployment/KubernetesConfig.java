package io.quarkus.kubernetes.deployment;

import static io.quarkus.kubernetes.deployment.Constants.CRONJOB;
import static io.quarkus.kubernetes.deployment.Constants.DEPLOYMENT;
import static io.quarkus.kubernetes.deployment.Constants.JOB;
import static io.quarkus.kubernetes.deployment.Constants.STATEFULSET;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.OptionalInt;

import io.dekorate.kubernetes.config.DeploymentStrategy;
import io.quarkus.deployment.Capabilities;
import io.quarkus.deployment.Capability;
import io.quarkus.kubernetes.spi.DeployStrategy;
import io.quarkus.runtime.annotations.ConfigItem;
import io.quarkus.runtime.annotations.ConfigRoot;

@ConfigRoot
public class KubernetesConfig extends KubernetesCommonConfig {

    public enum DeploymentResourceKind {
        Deployment(DEPLOYMENT),
        StatefulSet(STATEFULSET),
        Job(JOB),
        CronJob(CRONJOB);

        final String kind;

        DeploymentResourceKind(String kind) {
            this.kind = kind;
        }
    }

    /**
     * The kind of the deployment resource to use.
     * Supported values are 'StatefulSet', 'Job', 'CronJob' and 'Deployment' defaulting to the latter.
     */
    @ConfigItem
    Optional<KubernetesConfig.DeploymentResourceKind> deploymentKind;

    /**
     * The number of desired pods
     */
    @ConfigItem(defaultValue = "1")
    Integer replicas;

    /**
     * Specifies the deployment strategy.
     */
    @ConfigItem(defaultValue = "None")
    DeploymentStrategy strategy;

    /**
     * Specifies rolling update configuration.
     * The configuration is applied when DeploymentStrategy == RollingUpdate, or
     * when explicit configuration has been provided. In the later case RollingUpdate is assumed.
     */
    @ConfigItem
    RollingUpdateConfig rollingUpdate;

    /**
     * The nodePort to set when serviceType is set to node-port.
     */
    @ConfigItem
    OptionalInt nodePort;

    /**
     * The target deployment platform.
     * Defaults to kubernetes. Can be kubernetes, openshift, knative, minikube etc., or any combination of the above as comma
     * separated list.
     */
    @ConfigItem
    Optional<List<String>> deploymentTarget;

    /**
     * Ingress configuration
     */
    IngressConfig ingress;

    /**
     * Job configuration. It's only used if and only if {@code quarkus.kubernetes.deployment-kind} is `Job`.
     */
    JobConfig job;

    /**
     * CronJob configuration. It's only used if and only if {@code quarkus.kubernetes.deployment-kind} is `CronJob`.
     */
    CronJobConfig cronJob;

    /**
     * If set to true, Quarkus will attempt to deploy the application to the target Kubernetes cluster
     */
    @ConfigItem(defaultValue = "false")
    boolean deploy;

    /**
     * If deploy is enabled, it will follow this strategy to update the resources to the target Kubernetes cluster.
     */
    @ConfigItem(defaultValue = "CreateOrUpdate")
    DeployStrategy deployStrategy;

    /**
     * Debug configuration to be set in pods.
     */
    DebugConfig remoteDebug;

    /**
     * Flag to enable init task externalization.
     * When enabled (default), all initialization tasks
     * created by extensions, will be externalized as Jobs.
     * In addition, the deployment will wait for these jobs.
     *
     * @Deprecated use {@link #initTasks} configuration instead
     */
    @Deprecated(since = "3.1", forRemoval = true)
    @ConfigItem(defaultValue = "true")
    boolean externalizeInit;

    /**
     * Init tasks configuration.
     *
     * The init tasks are automatically generated by extensions like Flyway to perform the database migration before staring
     * up the application.
     *
     * This property is only taken into account if `quarkus.kubernetes.externalize-init` is true.
     */
    @ConfigItem
    Map<String, InitTaskConfig> initTasks;

    /**
     * Optionally set directory generated kubernetes resources will be written to. Default is `target/kubernetes`.
     */
    @ConfigItem
    Optional<String> outputDirectory;

    @Override
    public String getTargetPlatformName() {
        return Constants.KUBERNETES;
    }

    public Integer getReplicas() {
        return replicas;
    }

    public OptionalInt getNodePort() {
        return this.nodePort;
    }

    public DeployStrategy getDeployStrategy() {
        return deployStrategy;
    }

    public KubernetesConfig.DeploymentResourceKind getDeploymentResourceKind(Capabilities capabilities) {
        if (deploymentKind.isPresent()) {
            return deploymentKind.get();
        } else if (capabilities.isPresent(Capability.PICOCLI)) {
            return KubernetesConfig.DeploymentResourceKind.Job;
        }

        return DeploymentResourceKind.Deployment;
    }
}
