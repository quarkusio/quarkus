name: Quarkus CI

on:
  push:
    branches-ignore:
      - 'dependabot/**'
    paths-ignore:
      - 'docs/src/main/asciidoc/**'
      - 'README.md'
      - 'CONTRIBUTING.md'
      - 'ADOPTERS.md'
      - 'LICENSE.txt'
      - 'dco.txt'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/autoissuelabeler.yml'
      - '.github/boring-cyborg.yml'
      - '.github/NativeBuildReport.java'
      - '.dependabot/**'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - 'docs/src/main/asciidoc/**'
      - 'README.md'
      - 'CONTRIBUTING.md'
      - 'ADOPTERS.md'
      - 'LICENSE.txt'
      - 'dco.txt'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/autoissuelabeler.yml'
      - '.github/boring-cyborg.yml'
      - '.github/NativeBuildReport.java'
      - '.dependabot/**'

env:
  # Workaround testsuite locale issue
  LANG: en_US.UTF-8
  NATIVE_TEST_MAVEN_OPTS: "-B --settings .github/mvn-settings.xml --fail-at-end -Dquarkus.native.container-build=true -Dquarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-native-image:19.3.1-java11 -Dtest-postgresql -Dtest-elasticsearch -Dtest-keycloak -Dtest-amazon-services -Dtest-db2 -Dtest-mysql -Dtest-mariadb -Dmariadb.base_url='jdbc:mariadb://localhost:3308' -Dmariadb.url='jdbc:mariadb://localhost:3308/hibernate_orm_test'  -Dtest-mssql -Dtest-vault -Dtest-neo4j -Dtest-kafka -Dnative-image.xmx=5g -Dnative -Dformat.skip install"
  JVM_TEST_MAVEN_OPTS: "-e -B --settings .github/mvn-settings.xml -Dtest-postgresql -Dtest-elasticsearch -Dtest-db2 -Dtest-mysql -Dtest-mariadb -Dmariadb.base_url='jdbc:mariadb://localhost:3308' -Dmariadb.url='jdbc:mariadb://localhost:3308/hibernate_orm_test'  -Dtest-mssql -Dtest-amazon-services -Dtest-vault -Dtest-neo4j -Dtest-kafka -Dtest-keycloak -Dformat.skip"
  DB_USER: hibernate_orm_test
  DB_PASSWORD: hibernate_orm_test
  DB_NAME: hibernate_orm_test
jobs:
  build-jdk11:
    name: "JDK 11 Build"
    runs-on: ubuntu-latest
    # Skip draft PRs and those with WIP in the subject, rerun as soon as its removed
    if: "github.event_name != 'pull_request' || ( \
           github.event.pull_request.draft == false && \
           github.event.pull_request.state != 'closed' && \
           contains(github.event.pull_request.title, 'wip ') == false && \
           contains(github.event.pull_request.title, '[wip]') == false && \
           (
             github.event.action != 'edited' || \
             contains(github.event.changes.title.from, 'wip ') || \
             contains(github.event.changes.title.from, '[wip]') \
           ) \
         )"
    steps:
      - uses: actions/checkout@v2
      - uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Reclaim Disk Space
        run: .github/ci-prerequisites.sh
      - name: Set up JDK 11
        # Uses sha for added security since tags can be updated
        uses: joschi/setup-jdk@b9cc6eabf7e7e3889766b5cee486f874c9e1bd2d
        with:
          java-version: 11
      - name: Compute cache restore key
        # Always recompute on a push so that the maven repo doesnt grow indefinitely with old versions
        run: |
           if ${{ github.event_name == 'pull_request' }}; then echo "::set-env name=COMPUTED_RESTORE_KEY::q2maven-"; fi
      - name: Cache Maven Repository
        id: cache-maven
        uses: n1hility/cache@v2
        with:
          path: ~/.m2/repository
          # Improves the reusability of the cache to limit key changes
          key: q2maven-${{ hashFiles('bom/runtime/pom.xml') }}
          restore-keys: ${{ env.COMPUTED_RESTORE_KEY }}
          restore-only: ${{ github.event_name == 'pull_request' }}
      - name: Build
        run: |
          mvn -e -B -DskipTests -DskipITs -Dno-format -Ddocumentation-pdf clean install
      - name: Tar Maven Repo
        shell: bash
        run: tar -czvf maven-repo.tgz -C ~ .m2/repository
      - name: Persist Maven Repo
        uses: actions/upload-artifact@v1
        with:
          name: maven-repo
          path: maven-repo.tgz

  linux-jvm-tests:
    name: JDK ${{matrix.java.name}} JVM Tests
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java :
          - { name: Java8,
              java-version: 8,
              maven_args: "-pl !integration-tests/vault-app,!integration-tests/vault-agroal,!integration-tests/vault"
          }
          - {
            name: "Java 8 - 242",
            java-version: 8,
            release: "jdk8u242-b08"
          }
          - {
            name: Java 11,
            java-version: 11
          }
          - {
            name: Java 14,
            java-version: 14
          }

    services:
      keycloak:
        image: quay.io/keycloak/keycloak:10.0.2
        env:
          KEYCLOAK_USER: admin
          KEYCLOAK_PASSWORD: admin
          JAVA_OPTS: "-server -Xms64m -Xmx512m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true -Djava.awt.headless=true -Dkeycloak.profile.feature.upload_scripts=enabled"
        ports:
          - 127.0.0.1:8180:8080
          - 127.0.0.1:8543:8443
      postgres:
        image: postgres:10.5
        env:
          POSTGRES_USER: hibernate_orm_test
          POSTGRES_PASSWORD: hibernate_orm_test
          POSTGRES_DB: hibernate_orm_test
        ports:
          - 127.0.0.1:5432:5432
      mariadb:
        image: mariadb:10.4
        env:
          MYSQL_USER: hibernate_orm_test
          MYSQL_PASSWORD: hibernate_orm_test
          MYSQL_DATABASE: hibernate_orm_test
          MYSQL_ROOT_PASSWORD: secret
        ports:
          - 127.0.0.1:3308:3306
      mssql:
        image: microsoft/mssql-server-linux:2017-CU12
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: ActuallyRequired11Complexity
        ports:
          - 127.0.0.1:1433:1433
      neo4j:
        image: neo4j/neo4j-experimental:4.0.0-rc01
        env:
          NEO4J_AUTH: neo4j/secret
          NEO4J_dbms_memory_pagecache_size: 10M 
          NEO4J_dbms_memory_heap_initial__size: 10M
        ports:
          - 127.0.0.1:7687:7687
      amazonServices:
        image: localstack/localstack:0.11.1
        env:
          SERVICES: s3,dynamodb,sns,sqs,kms,ses
          START_WEB: 0
        ports:
          - 127.0.0.1:8000:4569
          - 127.0.0.1:8008:4572
          - 127.0.0.1:8009:4575
          - 127.0.0.1:8010:4576
          - 127.0.0.1:8011:4599
          - 127.0.0.1:8012:4566

    steps:
      - name: Start mysql
        shell: bash
        run: |
          netstat -ln
          sudo service mysql stop || true
          docker run --rm --publish 127.0.0.1:3306:3306 --name build-mysql -e MYSQL_USER=$DB_USER -e MYSQL_PASSWORD=$DB_PASSWORD -e MYSQL_DATABASE=$DB_NAME -e MYSQL_RANDOM_ROOT_PASSWORD=true -e MYSQL_DATABASE=hibernate_orm_test -d mysql:5 --skip-ssl
      - name: Start DB2
        # Cannot run as a service becuase the service schema does not support --privileged mode
        shell: bash
        run: |
          docker run --rm --publish 50000:50000 --name build-db2 --privileged=true \
            -e DB2INSTANCE=hreact -e DB2INST1_PASSWORD=hreact -e DBNAME=hreact -e LICENSE=accept -e AUTOCONFIG=false -e ARCHIVE_LOGS=false \
            -d ibmcom/db2:11.5.0.0a

      - uses: actions/checkout@v2

      - name: apt clean
        shell: bash
        run: sudo apt-get clean

      - name: Reclaim Disk Space
        run: .github/ci-prerequisites.sh

      - name: Set up JDK ${{ matrix.java.name }}
        # Uses sha for added security since tags can be updated
        uses: joschi/setup-jdk@b9cc6eabf7e7e3889766b5cee486f874c9e1bd2d
        with:
          java-version: ${{ matrix.java.java-version }}
          release: ${{ matrix.java.release }}

      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: eval mvn $JVM_TEST_MAVEN_OPTS install ${{ matrix.java.maven_args}}
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports-linux-jvm${{matrix.java.name}}
          path: 'test-reports.tgz'

  windows-jdk11-jvm-tests:
    name: Windows JDK 11 JVM Tests
    needs: build-jdk11
    runs-on: windows-latest
    timeout-minutes: 130
    env:
      MAVEN_OPTS: -Xmx1408m
   
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        # Uses sha for added security since tags can be updated
        uses: joschi/setup-jdk@b9cc6eabf7e7e3889766b5cee486f874c9e1bd2d
        with:
          java-version: 11
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        shell: bash
        run: mvn -B --settings .github/mvn-settings.xml -Dno-native -Dformat.skip install
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          # Disambiguate windows find from cygwin find
          /usr/bin/find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports-windows-jdk11-jvm
          path: 'test-reports.tgz'

  tcks-test:
    name: TCKS Test
    needs: build-jdk11
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - uses: actions/checkout@v2
      - name: Reclaim Disk Space
        run: .github/ci-prerequisites.sh
      - name: Set up JDK 11
        # Uses sha for added security since tags can be updated
        uses: joschi/setup-jdk@b9cc6eabf7e7e3889766b5cee486f874c9e1bd2d
        with:
          java-version: 11
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: mvn -B --settings .github/mvn-settings.xml -Dno-native -Dno-format -DskipTests -Dtcks install
      - name: Verify with Maven
        run: mvn -B --settings .github/mvn-settings.xml -f tcks/pom.xml verify
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports-tcks
          path: 'test-reports.tgz'
       
  native-tests:
    name: Native Tests - ${{matrix.category}}
    needs: build-jdk11
    runs-on: ubuntu-latest
    # Ignore the following YAML Schema error 
    timeout-minutes: ${{matrix.timeout}}
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        category: [Main, Data1, Data2, Data3, Data4, Data5, Security1, Security2, Security3, Amazon, Messaging, Cache, HTTP, Misc1, Misc2, Misc3, Misc4, Spring, gRPC]
        include:
          - category: Main
            postgres: "true"
            timeout: 30
            test-modules: main
          - category: Data1
            mariadb: "true"
            mssql: "true"
            timeout: 55
            test-modules: >
              jpa-h2
              jpa-mariadb
              jpa-mssql
              jpa-derby
              jpa-without-entity
              hibernate-tenancy
          - category: Data2
            db2: "true"
            mysql: "true"
            postgres: "true"
            mariadb: "true"
            timeout: 55
            test-modules: >
              jpa
              jpa-postgresql
              jpa-mysql
              reactive-mysql-client
              reactive-db2-client
              hibernate-reactive-db2
              hibernate-reactive-mysql
          - category: Data3
            postgres: "true"
            timeout: 60
            test-modules: >
              flyway
              hibernate-orm-panache
              hibernate-orm-panache-kotlin
              liquibase
          - category: Data4
            neo4j: "true"
            timeout: 40
            test-modules: >
              mongodb-client
              mongodb-panache
              neo4j
              hibernate-orm-rest-data-panache
          - category: Data5
            postgres: "true"
            timeout: 45
            test-modules: >
              hibernate-search-elasticsearch
              narayana-stm
              narayana-jta
              reactive-pg-client
              hibernate-reactive
          - category: Amazon
            amazonServices: "true"
            timeout: 35
            test-modules: >
              amazon-services
              amazon-lambda
              amazon-lambda-http
          - category: Messaging
            timeout: 65
            test-modules: >
              artemis-core
              artemis-jms
              kafka
              kafka-streams
              reactive-messaging-amqp
          - category: Security1
            timeout: 40
            keycloak: "true"
            test-modules: >
              elytron-security-oauth2
              elytron-security
              elytron-security-jdbc
              elytron-undertow
              elytron-security-ldap
          - category: Security2
            timeout: 60
            keycloak: "true"
            test-modules: >
              elytron-resteasy
              oidc
              oidc-code-flow
              oidc-tenancy
              keycloak-authorization
          - category: Security3
            timeout: 40
            test-modules: >
              vault
              vault-app
              vault-agroal
          - category: Cache
            timeout: 45
            test-modules: >
              infinispan-cache-jpa
              infinispan-client
              infinispan-embedded
              cache
          - category: HTTP
            timeout: 45
            test-modules: >
              resteasy-jackson
              resteasy-mutiny
              vertx
              vertx-http
              vertx-graphql
              virtual-http
              rest-client
          - category: Misc1
            timeout: 50
            test-modules: >
              maven
              jackson
              jsonb
              jsch
              jgit
              quartz
              qute
              consul-config
          - category: Misc2
            timeout: 45
            test-modules: >
              tika
              hibernate-validator
              test-extension
              logging-gelf
              bootstrap-config
              optaplanner-jackson
              optaplanner-jsonb
          # kubernetes-client alone takes 30mn+
          - category: Misc3
            timeout: 50
            test-modules: >
              kubernetes-client
          - category: Misc4
            timeout: 20
            test-modules: >
              smallrye-graphql
              picocli-native
          - category: Spring
            timeout: 40
            test-modules: >
              spring-di
              spring-web
              spring-data-jpa
              spring-boot-properties
              spring-cloud-config-client
          - category: gRPC
            timeout: 55
            test-modules: >
              grpc-health
              grpc-interceptors
              grpc-mutual-auth
              grpc-plain-text
              grpc-proto-v2
              grpc-streaming
              grpc-tls
    steps:
      # These should be services, but services do not (yet) allow conditional execution
      - name: Postgres Service
        run: |
              docker run --rm --publish 5432:5432 --name build-postgres \
              -e POSTGRES_USER=$DB_USER -e POSTGRES_PASSWORD=$DB_PASSWORD -e POSTGRES_DB=$DB_NAME \
              -d postgres:10.5
        if: matrix.postgres
      - name: MySQL Service
        run: |
          sudo service mysql stop || true
          docker run --rm --publish 3306:3306 --name build-mysql  \
            -e MYSQL_USER=$DB_USER -e MYSQL_PASSWORD=$DB_PASSWORD -e MYSQL_DATABASE=$DB_NAME -e MYSQL_RANDOM_ROOT_PASSWORD=true \
            -d mysql:5 --skip-ssl
        if: matrix.mysql
      - name: DB2 Service
        run: |
          docker run --rm --publish 50000:50000 --name build-db2 --privileged=true \
            -e DB2INSTANCE=hreact -e DB2INST1_PASSWORD=hreact -e DBNAME=hreact -e LICENSE=accept -e AUTOCONFIG=false -e ARCHIVE_LOGS=false \
            -d ibmcom/db2:11.5.0.0a
        if: matrix.db2
      - name: Maria DB Service
        run: |
          docker run --rm --publish 3308:3306 --name build-mariadb \
            -e MYSQL_USER=$DB_USER -e MYSQL_PASSWORD=$DB_PASSWORD -e MYSQL_DATABASE=$DB_NAME -e MYSQL_ROOT_PASSWORD=secret \
            -d mariadb:10.4
        if: matrix.mariadb
      - name: MS-SQL Service
        run: |
          docker run --rm --publish 1433:1433 --name build-mssql \
            -e ACCEPT_EULA=Y -e SA_PASSWORD=ActuallyRequired11Complexity \
            -d microsoft/mssql-server-linux:2017-CU12
        if: matrix.mssql
      - name: Amazon Services
        run: |
          docker run --rm --publish 8000:4569 --publish 8008:4572 --publish 8009:4575 --publish 8010:4576 --publish 8011:4599 --publish 8012:4566 --name build-amazon-service-clients -e SERVICES=s3,dynamodb,sns,sqs,kms,ses -e START_WEB=0 \
            -d localstack/localstack:0.11.1
        if: matrix.amazonServices
      - name: Neo4j Service
        run: |
          docker run --rm --publish 7687:7687 --name build-neo4j \
            -e NEO4J_AUTH=neo4j/secret -e NEO4J_dbms_memory_pagecache_size=10M -e NEO4J_dbms_memory_heap_initial__size=10M \
            -d neo4j/neo4j-experimental:4.0.0-rc01
        if: matrix.neo4j
      - name: Keycloak Service
        run: |
          docker run --rm --publish 8180:8080 --publish 8543:8443 --name build-keycloak \
            -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin -e JAVA_OPTS=" \
              -server -Xms64m -Xmx512m -XX:MetaspaceSize=96M \
              -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true -Djava.awt.headless=true \
              -Dkeycloak.profile.feature.upload_scripts=enabled" \
            -d quay.io/keycloak/keycloak:10.0.2
        if: matrix.keycloak
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        # Uses sha for added security since tags can be updated
        uses: joschi/setup-jdk@b9cc6eabf7e7e3889766b5cee486f874c9e1bd2d
        with:
          java-version: 11
      - name: Reclaim Disk Space
        run: .github/ci-prerequisites.sh
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        env: 
          TEST_MODULES: ${{matrix.test-modules}}
          CATEGORY: ${{matrix.category}}
        run: |
          for i in $TEST_MODULES
          do modules+=("integration-tests/$i"); done
          IFS=,
          eval mvn -pl "${modules[*]}" $NATIVE_TEST_MAVEN_OPTS
          # add the 'simple with spaces' project to the run of 'Misc1' by executing it explicitly
          # done because there is no good way to pass strings with empty values to the previous command
          # so this hack is as good as any
          if [ "$CATEGORY" == "Misc1" ]; then
            mvn -Dnative -Dquarkus.native.container-build=true -B --settings .github/mvn-settings.xml -f 'integration-tests/simple with space/' verify
          fi
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -type d -name '*-reports' -o -wholename '*/build/reports/tests/functionalTest' | tar -czvf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports-native-${{matrix.category}}
          path: 'test-reports.tgz'
