<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>quarkus-tck-parent</artifactId>
        <groupId>io.quarkus</groupId>
        <version>999-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>quarkus-tck-microprofile-opentelemetry</artifactId>
    <name>Quarkus - TCK - MicroProfile OpenTelemetry</name>

    <properties>
        <microprofile-opentelemetry-tck.version>2.0.1</microprofile-opentelemetry-tck.version>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <!-- TODO - Because of PropagatorSpiTest, which contains multiple Application classes - needs to be fixed in the TCK -->
                    <systemPropertyVariables>
                        <quarkus.otel.mp.compatibility>true</quarkus.otel.mp.compatibility>
                        <quarkus.resteasy.ignore-application-classes>true</quarkus.resteasy.ignore-application-classes>
                    </systemPropertyVariables>
                    <excludesFile>src/test/resources/exclusions.txt</excludesFile>
                </configuration>
                <executions>
                    <execution>
                        <id>tracing</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <skip>false</skip>
                            <reportsDirectory>${project.build.directory}/surefire-reports-tracing</reportsDirectory>
                            <dependenciesToScan>
                                <dependency>org.eclipse.microprofile.telemetry:microprofile-telemetry-tracing-tck</dependency>
                            </dependenciesToScan>
                        </configuration>
                    </execution>
                    <execution>
                        <id>metrics</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <skip>false</skip>
                            <reportsDirectory>${project.build.directory}/surefire-reports-metrics</reportsDirectory>
                            <systemPropertyVariables>
                                <quarkus.otel.traces.exporter>none</quarkus.otel.traces.exporter>
                                <quarkus.otel.metrics.enabled>true</quarkus.otel.metrics.enabled>
                                <quarkus.otel.metric.export.interval>1000</quarkus.otel.metric.export.interval>
                            </systemPropertyVariables>
                            <dependenciesToScan>
                                <dependency>org.eclipse.microprofile.telemetry:microprofile-telemetry-metrics-tck</dependency>
                            </dependenciesToScan>
                            <includes>
                                <include>**/application/**/*Test.java</include>
                            </includes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>metrics-jvm</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <skip>false</skip>
                            <reportsDirectory>${project.build.directory}/surefire-reports-metrics-jvm</reportsDirectory>
                            <systemPropertyVariables>
                                <quarkus.otel.sdk.disabled>false</quarkus.otel.sdk.disabled>
                                <quarkus.otel.traces.exporter>none</quarkus.otel.traces.exporter>
                                <quarkus.otel.metrics.enabled>true</quarkus.otel.metrics.enabled>
                                <quarkus.otel.metrics.exporter>logging</quarkus.otel.metrics.exporter>
                                <quarkus.otel.metric.export.interval>1000</quarkus.otel.metric.export.interval>
                                <quarkus.log.file.enable>true</quarkus.log.file.enable>
                                <quarkus.log.file.path>${project.build.directory}/out.log</quarkus.log.file.path>
                                <mptelemetry.tck.log.file.path>${project.build.directory}/out.log</mptelemetry.tck.log.file.path>
                            </systemPropertyVariables>
                            <dependenciesToScan>
                                <dependency>org.eclipse.microprofile.telemetry:microprofile-telemetry-metrics-tck</dependency>
                            </dependenciesToScan>
                            <includes>
                                <include>**/jvm/*Test.java</include>
                            </includes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>logs</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <skip>false</skip>
                            <reportsDirectory>${project.build.directory}/surefire-reports-logs</reportsDirectory>
                            <systemPropertyVariables>
                                <quarkus.otel.sdk.disabled>false</quarkus.otel.sdk.disabled>
                                <quarkus.otel.traces.enabled>false</quarkus.otel.traces.enabled>
                                <quarkus.otel.metrics.enabled>false</quarkus.otel.metrics.enabled>
                                <quarkus.otel.logs.enabled>true</quarkus.otel.logs.enabled>
                                <quarkus.otel.logs.exporter>logging</quarkus.otel.logs.exporter>
                                <!--  No point on using quarkus file logging. The logging logs exporter uses sys out -->
                                <!--  Please check: io.quarkus.tck.opentelemetry.TestApplication.LogHandlerService -->
                                <quarkus.otel.blrp.schedule.delay>100</quarkus.otel.blrp.schedule.delay>
                                <!--  <quarkus.log.file.enable>true</quarkus.log.file.enable>-->
                                <quarkus.log.file.path>${project.build.directory}/out.log</quarkus.log.file.path>
                                <mptelemetry.tck.log.file.path>${project.build.directory}/out.log
                                </mptelemetry.tck.log.file.path>
                            </systemPropertyVariables>
                            <dependenciesToScan>
                                <dependency>org.eclipse.microprofile.telemetry:microprofile-telemetry-logs-tck
                                </dependency>
                            </dependenciesToScan>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>jakarta.enterprise</groupId>
            <artifactId>jakarta.enterprise.cdi-api</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-arquillian</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-opentelemetry</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy-jsonb</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile.telemetry</groupId>
            <artifactId>microprofile-telemetry-tracing-tck</artifactId>
            <version>${microprofile-opentelemetry-tck.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.sonatype.plexus</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile.telemetry</groupId>
            <artifactId>microprofile-telemetry-metrics-tck</artifactId>
            <version>${microprofile-opentelemetry-tck.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile.telemetry</groupId>
            <artifactId>microprofile-telemetry-logs-tck</artifactId>
            <version>${microprofile-opentelemetry-tck.version}</version>
        </dependency>
        <dependency>
            <groupId>io.opentelemetry</groupId>
            <artifactId>opentelemetry-exporter-logging</artifactId>
        </dependency>

        <!-- Minimal test dependencies to *-deployment artifacts for consistent build order -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy-client-deployment</artifactId>
            <version>${project.version}</version>
            <type>pom</type>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>*</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy-jsonb-deployment</artifactId>
            <version>${project.version}</version>
            <type>pom</type>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>*</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-opentelemetry-deployment</artifactId>
            <version>${project.version}</version>
            <type>pom</type>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>*</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

</project>
