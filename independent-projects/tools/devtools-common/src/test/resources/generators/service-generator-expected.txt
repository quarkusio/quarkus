package io.quarkus.service;import io.quarkus.model.User;import io.quarkus.repository.UserRepository;import javax.enterprise.context.ApplicationScoped;import javax.inject.Inject;import javax.transaction.Transactional;import javax.validation.ConstraintViolation;import javax.validation.Validator;import java.util.List;import java.util.stream.Collectors;@ApplicationScopedpublic class UserService {    private final UserRepository userRepository;    private final Validator validator;    @Inject    public UserService(UserRepository repository, Validator validator) {        this.userRepository = repository;        this.validator = validator;    }    public List<User> listAll() {        return userRepository.findOrderByName();    }    @Transactional    public User create(User user) {        var violations = validator.validate(user);        if (violations.isEmpty()) {            userRepository.persist(user);            return userRepository.findById(user.id);        }        String allViolations = violations.stream()                .map(ConstraintViolation::getMessage)                .collect(Collectors.joining(", "));        /*throw new AppException(400, allViolations);*/    }    public User findById(Long id) {        return userRepository.findByIdOptional(id).orElseThrow(() -> {            /* throw new AppException(204, "user_id ".concat(String.valueOf(id)).concat(" not found")); */        });    }    @Transactional    public User update(Long id, User userToUpdate) {        var user = this.findById(id);        userRepository.persist(user);        return person;    }    @Transactional    public String deletePerson(long id) {        this.findById(id);        userRepository.deleteById(id);        return "deleted";    }}
